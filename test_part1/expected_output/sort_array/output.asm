; Generated by PHYLOG Compiler
bits 16
global _start

section .data
    hook_input db 'INPUT', 0
    hook_output db 'OUTPUT', 0
    ; Message strings
    msg0 db 'Unsorted array:', 0
    msg1 db 'NUMBERS[', 0
    msg2 db '] = ', 0
    msg3 db 'Sorted array:', 0
    msg4 db 'NUMBERS[', 0
    msg5 db '] = ', 0
    msg6 db 'Number of swaps: ', 0
    TEN dw 10
    MINARRAYSIZE dw 0
    N dw 0
    MAXARRAYSIZE dw 0
    ONE dw 1
    NUMBERS times 100 dw 0
    TWO dw 2
    ZERO dw 0
    ; Temporary variables
    T11 dw 0
    T12 dw 0
    T13 dw 0
    T14 dw 0
    T15 dw 0
    T16 dw 0
    T17 dw 0
    T19 dw 0
    T20 dw 0
    T22 dw 0
    T23 dw 0
    T24 dw 0
    T25 dw 0
    T26 dw 0
    T4 dw 0
    T8 dw 0
    T9 dw 0

section .text
_start:
    ; Program initialization
    mov ax, data
    mov ds, ax


    ; Quad 0: BOUNDS 1 100 
    ; Array bounds checking

    ; Quad 1: ADEC NUMBERS  
    ; Array declaration: NUMBERS

    ; Quad 2: := 1  MINARRAYSIZE
    mov ax, 1
    mov [MINARRAYSIZE], ax

    ; Quad 3: := 100  MAXARRAYSIZE
    mov ax, 100
    mov [MAXARRAYSIZE], ax

    ; Quad 4: LIRE $  N
    ; Input operation
    lea bx, [N]  ; Get address of target variable
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Call hook

    ; Quad 5: BGE L2 N MINARRAYSIZE
    mov ax, [N]
    cmp ax, [MINARRAYSIZE]
    jge L2

    ; Quad 6: SAUT L0  
    jmp L0

    ; Quad 7: ETIQ L0  
L0:

    ; Quad 8: := MINARRAYSIZE  N
    mov ax, [MINARRAYSIZE]
    mov [N], ax

    ; Quad 9: SAUT L1  
    jmp L1

    ; Quad 10: ETIQ L2  
L2:

    ; Quad 11: := MINARRAYSIZE  T4
    mov ax, [MINARRAYSIZE]
    mov [T4], ax

    ; Quad 12: := T4  MINARRAYSIZE
    mov ax, [T4]
    mov [MINARRAYSIZE], ax

    ; Quad 13: ETIQ L1  
L1:

    ; Quad 14: BLE L4 N MAXARRAYSIZE
    mov ax, [N]
    cmp ax, [MAXARRAYSIZE]
    jle L4

    ; Quad 15: SAUT L3  
    jmp L3

    ; Quad 16: ETIQ L3  
L3:

    ; Quad 17: := MAXARRAYSIZE  N
    mov ax, [MAXARRAYSIZE]
    mov [N], ax

    ; Quad 18: ETIQ L4  
L4:

    ; Quad 19: ETIQ L5  
L5:

    ; Quad 20: BG L7 1 N
    mov ax, [1]
    cmp ax, [N]
    jg L7

    ; Quad 21: SAUT L6  
    jmp L6

    ; Quad 22: ETIQ L6  
L6:

    ; Quad 23: - 1 1 T8
    mov ax, 1
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T8], ax

    ; Quad 24: SAUT   L5
    jmp 

    ; Quad 25: ETIQ L7  
L7:

    ; Quad 26: AFFICHER Unsorted array: 0 
    ; Output operation
    mov dx, msg0  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 27: ETIQ L8  
L8:

    ; Quad 28: BG L10 1 N
    mov ax, [1]
    cmp ax, [N]
    jg L10

    ; Quad 29: SAUT L9  
    jmp L9

    ; Quad 30: ETIQ L9  
L9:

    ; Quad 31: AFFICHER NUMBERS[ 1 
    ; Output operation
    mov dx, msg1  ; String message
    mov ax, 1
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 32: := T8  T9
    mov ax, [T8]
    mov [T9], ax

    ; Quad 33: AFFICHER ] =  NUMBERS[T9] 
    ; Output operation
    mov dx, msg2  ; String message
    ; Array access NUMBERS[T9]
    mov bx, [T9]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, NUMBERS    ; Add array base address
    mov ax, [bx]  ; Load value from array
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 34: SAUT   L8
    jmp 

    ; Quad 35: ETIQ L10  
L10:

    ; Quad 36: ETIQ L11  
L11:

    ; Quad 37: BGE L13 1 N
    mov ax, [1]
    cmp ax, [N]
    jge L13

    ; Quad 38: SAUT L12  
    jmp L12

    ; Quad 39: ETIQ L12  
L12:

    ; Quad 40: ETIQ L14  
L14:

    ; Quad 41: - N 1 T11
    mov ax, [N]
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T11], ax

    ; Quad 42: BG L16 1 T11
    mov ax, [1]
    cmp ax, [T11]
    jg L16

    ; Quad 43: SAUT L15  
    jmp L15

    ; Quad 44: ETIQ L15  
L15:

    ; Quad 45: := T8  T12
    mov ax, [T8]
    mov [T12], ax

    ; Quad 46: := NUMBERS[T12]  T13
    ; Array access NUMBERS[T12]
    mov bx, [T12]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, NUMBERS    ; Add array base address
    mov ax, [bx]  ; Load value from array
    mov [T13], ax

    ; Quad 47: + 1 1 T14
    mov ax, 1
    mov cx, ax    ; Save first operand
    mov ax, 1
    add ax, cx    ; Add operands
    mov [T14], ax

    ; Quad 48: - T14 1 T15
    mov ax, [T14]
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T15], ax

    ; Quad 49: := NUMBERS[T15]  T16
    ; Array access NUMBERS[T15]
    mov bx, [T15]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, NUMBERS    ; Add array base address
    mov ax, [bx]  ; Load value from array
    mov [T16], ax

    ; Quad 50: BLE L18 T13 T16
    mov ax, [T13]
    cmp ax, [T16]
    jle L18

    ; Quad 51: SAUT L17  
    jmp L17

    ; Quad 52: ETIQ L17  
L17:

    ; Quad 53: := T8  T17
    mov ax, [T8]
    mov [T17], ax

    ; Quad 54: := T14  T19
    mov ax, [T14]
    mov [T19], ax

    ; Quad 55: - T19 1 T20
    mov ax, [T19]
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T20], ax

    ; Quad 56: := T8  T22
    mov ax, [T8]
    mov [T22], ax

    ; Quad 57: := T14  T23
    mov ax, [T14]
    mov [T23], ax

    ; Quad 58: - T23 1 T24
    mov ax, [T23]
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T24], ax

    ; Quad 59: := 1  T25
    mov ax, 1
    mov [T25], ax

    ; Quad 60: ETIQ L18  
L18:

    ; Quad 61: SAUT   L14
    jmp 

    ; Quad 62: ETIQ L16  
L16:

    ; Quad 63: SAUT   L11
    jmp 

    ; Quad 64: ETIQ L13  
L13:

    ; Quad 65: AFFICHER Sorted array: 0 
    ; Output operation
    mov dx, msg3  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 66: ETIQ L19  
L19:

    ; Quad 67: BG L21 1 N
    mov ax, [1]
    cmp ax, [N]
    jg L21

    ; Quad 68: SAUT L20  
    jmp L20

    ; Quad 69: ETIQ L20  
L20:

    ; Quad 70: AFFICHER NUMBERS[ 1 
    ; Output operation
    mov dx, msg1  ; String message
    mov ax, 1
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 71: := T8  T26
    mov ax, [T8]
    mov [T26], ax

    ; Quad 72: AFFICHER ] =  NUMBERS[T26] 
    ; Output operation
    mov dx, msg2  ; String message
    ; Array access NUMBERS[T26]
    mov bx, [T26]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, NUMBERS    ; Add array base address
    mov ax, [bx]  ; Load value from array
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 73: SAUT   L19
    jmp 

    ; Quad 74: ETIQ L21  
L21:

    ; Quad 75: AFFICHER Number of swaps:  T25 
    ; Output operation
    mov dx, msg6  ; String message
    mov ax, [T25]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

; I/O Hooks for Python emulator
read_int:
    ; Input hook - Python will intercept
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Custom interrupt
    ret

print_int:
    ; Output hook - Python will intercept
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Custom interrupt
    ret


    ; Program termination
    mov ax, 4C00h
    int 21h
