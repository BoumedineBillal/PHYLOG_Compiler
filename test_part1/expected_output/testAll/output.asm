; Generated by PHYLOG Compiler
bits 16
global _start

section .data
    hook_input db 'INPUT', 0
    hook_output db 'OUTPUT', 0
    ; Message strings
    msg0 db 'Enter an integer $', 0
    msg1 db 'Enter a float $', 0
    msg2 db 'Enter a character $', 0
    msg3 db 'Enter a string $', 0
    msg4 db 'Age entered is $', 0
    msg5 db 'Price entered is %', 0
    msg6 db 'Character entered is &', 0
    msg7 db 'String entered is #', 0
    msg8 db 'Value of N is $', 0
    msg9 db 'Value of X is %', 0
    msg10 db 'Value of C1 is &', 0
    msg11 db 'Message is #', 0
    msg12 db 'Sum of 1 to N is $', 0
    INPUT dw 0
    TEN dw 10
    THREE dw 3
    PRICE dw 0
    I dw 0
    J dw 0
    N dw 0
    ONE dw 1
    FIVE dw 5
    TWO dw 2
    INT_ARRAY times 10 dw 0
    ZERO dw 0
    AGE dw 0
    CHOICE dw 0
    ; Temporary variables
    T26 dw 0
    T27 dw 0
    T29 dw 0
    T33 dw 0
    T37 dw 0
    T38 dw 0
    T40 dw 0
    T45 dw 0
    T47 dw 0
    T49 dw 0
    T55 dw 0
    T56 dw 0
    T57 dw 0

section .text
_start:
    ; Program initialization
    mov ax, data
    mov ds, ax


    ; Quad 0: := 0  ZERO
    mov ax, 0
    mov [ZERO], ax

    ; Quad 1: := 1  ONE
    mov ax, 1
    mov [ONE], ax

    ; Quad 2: := 5  FIVE
    mov ax, 5
    mov [FIVE], ax

    ; Quad 3: := 10  TEN
    mov ax, 10
    mov [TEN], ax

    ; Quad 4: BOUNDS 1 10 
    ; Array bounds checking

    ; Quad 5: ADEC INT_ARRAY  
    ; Array declaration: INT_ARRAY

    ; Quad 6: BOUNDS 0 5 
    ; Array bounds checking

    ; Quad 7: ADEC FLOAT_ARRAY  
    ; Array declaration: FLOAT_ARRAY

    ; Quad 8: BOUNDS 5 26 
    ; Array bounds checking

    ; Quad 9: ADEC CHAR_ARRAY  
    ; Array declaration: CHAR_ARRAY

    ; Quad 10: := 10  N
    mov ax, 10
    mov [N], ax

    ; Quad 11: AFFICHER Enter an integer $ 0 
    ; Output operation
    mov dx, msg0  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 12: LIRE $  AGE
    ; Input operation
    lea bx, [AGE]  ; Get address of target variable
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Call hook

    ; Quad 13: AFFICHER Enter a float $ 0 
    ; Output operation
    mov dx, msg1  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 14: LIRE %  PRICE
    ; Input operation
    lea bx, [PRICE]  ; Get address of target variable
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Call hook

    ; Quad 15: AFFICHER Enter a character $ 0 
    ; Output operation
    mov dx, msg2  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 16: LIRE &  CHOICE
    ; Input operation
    lea bx, [CHOICE]  ; Get address of target variable
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Call hook

    ; Quad 17: AFFICHER Enter a string $ 0 
    ; Output operation
    mov dx, msg3  ; String message
    mov bx, 0     ; No value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 18: LIRE #  INPUT
    ; Input operation
    lea bx, [INPUT]  ; Get address of target variable
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Call hook

    ; Quad 19: AFFICHER Age entered is $ AGE 
    ; Output operation
    mov dx, msg4  ; String message
    mov ax, [AGE]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 20: AFFICHER Price entered is % PRICE 
    ; Output operation
    mov dx, msg5  ; String message
    mov ax, [PRICE]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 21: AFFICHER Character entered is & CHOICE 
    ; Output operation
    mov dx, msg6  ; String message
    mov ax, [CHOICE]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 22: AFFICHER String entered is # INPUT 
    ; Output operation
    mov dx, msg7  ; String message
    mov ax, [INPUT]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 23: := 1  I
    mov ax, 1
    mov [I], ax

    ; Quad 24: := 1  I
    mov ax, 1
    mov [I], ax

    ; Quad 25: ETIQ L0  
L0:

    ; Quad 26: BG L2 1 N
    mov ax, [1]
    cmp ax, [N]
    jg L2

    ; Quad 27: SAUT L1  
    jmp L1

    ; Quad 28: ETIQ L1  
L1:

    ; Quad 29: - 1 1 T26
    mov ax, 1
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T26], ax

    ; Quad 30: BLE L4 1 ONE
    mov ax, [1]
    cmp ax, [ONE]
    jle L4

    ; Quad 31: SAUT L3  
    jmp L3

    ; Quad 32: ETIQ L3  
L3:

    ; Quad 33: - 1 ONE T27
    mov ax, 1
    mov cx, ax    ; Save first operand
    mov ax, [ONE]
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T27], ax

    ; Quad 34: := T27  T29
    mov ax, [T27]
    mov [T29], ax

    ; Quad 35: ETIQ L4  
L4:

    ; Quad 36: + I 1 I
    mov ax, [I]
    mov cx, ax    ; Save first operand
    mov ax, 1
    add ax, cx    ; Add operands
    mov [I], ax

    ; Quad 37: SAUT   L0
    jmp 

    ; Quad 38: ETIQ L2  
L2:

    ; Quad 39: BLE L7 N FIVE
    mov ax, [N]
    cmp ax, [FIVE]
    jle L7

    ; Quad 40: SAUT L5  
    jmp L5

    ; Quad 41: ETIQ L5  
L5:

    ; Quad 42: SAUT L6  
    jmp L6

    ; Quad 43: ETIQ L7  
L7:

    ; Quad 44: ETIQ L6  
L6:

    ; Quad 45: := 5.000000  T33
    mov ax, 5.000000
    mov [T33], ax

    ; Quad 46: BLE L13 5.500000 T33
    mov ax, [5.500000]
    cmp ax, [T33]
    jle L13

    ; Quad 47: SAUT L8  
    jmp L8

    ; Quad 48: ETIQ L8  
L8:

    ; Quad 49: BNE L12 N TEN
    mov ax, [N]
    cmp ax, [TEN]
    jne L12

    ; Quad 50: SAUT L10  
    jmp L10

    ; Quad 51: ETIQ L10  
L10:

    ; Quad 52: SAUT L11  
    jmp L11

    ; Quad 53: ETIQ L12  
L12:

    ; Quad 54: ETIQ L11  
L11:

    ; Quad 55: SAUT L9  
    jmp L9

    ; Quad 56: ETIQ L13  
L13:

    ; Quad 57: ETIQ L9  
L9:

    ; Quad 58: := 5.000000  T37
    mov ax, 5.000000
    mov [T37], ax

    ; Quad 59: BLE L16 5.500000 T37
    mov ax, [5.500000]
    cmp ax, [T37]
    jle L16

    ; Quad 60: SAUT L14  
    jmp L14

    ; Quad 61: := 20  T38
    mov ax, 20
    mov [T38], ax

    ; Quad 62: BGE L16 N T38
    mov ax, [N]
    cmp ax, [T38]
    jge L16

    ; Quad 63: SAUT L15  
    jmp L15

    ; Quad 64: ETIQ L14  
L14:

    ; Quad 65: ETIQ L15  
L15:

    ; Quad 66: ETIQ L16  
L16:

    ; Quad 67: := 0.000000  T40
    mov ax, 0.000000
    mov [T40], ax

    ; Quad 68: BGE L17 5.500000 T40
    mov ax, [5.500000]
    cmp ax, [T40]
    jge L17

    ; Quad 69: SAUT L18  
    jmp L18

    ; Quad 70: BLE L19 N FIVE
    mov ax, [N]
    cmp ax, [FIVE]
    jle L19

    ; Quad 71: SAUT L18  
    jmp L18

    ; Quad 72: ETIQ L17  
L17:

    ; Quad 73: ETIQ L18  
L18:

    ; Quad 74: ETIQ L19  
L19:

    ; Quad 75: BNE L20 N ZERO
    mov ax, [N]
    cmp ax, [ZERO]
    jne L20

    ; Quad 76: SAUT L21  
    jmp L21

    ; Quad 77: ETIQ L20  
L20:

    ; Quad 78: ETIQ L21  
L21:

    ; Quad 79: := ONE  J
    mov ax, [ONE]
    mov [J], ax

    ; Quad 80: ETIQ L22  
L22:

    ; Quad 81: BG L24 J N
    mov ax, [J]
    cmp ax, [N]
    jg L24

    ; Quad 82: SAUT L23  
    jmp L23

    ; Quad 83: ETIQ L23  
L23:

    ; Quad 84: + J 1 J
    mov ax, [J]
    mov cx, ax    ; Save first operand
    mov ax, 1
    add ax, cx    ; Add operands
    mov [J], ax

    ; Quad 85: SAUT   L22
    jmp 

    ; Quad 86: ETIQ L24  
L24:

    ; Quad 87: := ONE  I
    mov ax, [ONE]
    mov [I], ax

    ; Quad 88: ETIQ L25  
L25:

    ; Quad 89: BG L27 I FIVE
    mov ax, [I]
    cmp ax, [FIVE]
    jg L27

    ; Quad 90: SAUT L26  
    jmp L26

    ; Quad 91: ETIQ L26  
L26:

    ; Quad 92: := ONE  J
    mov ax, [ONE]
    mov [J], ax

    ; Quad 93: ETIQ L28  
L28:

    ; Quad 94: BG L30 J I
    mov ax, [J]
    cmp ax, [I]
    jg L30

    ; Quad 95: SAUT L29  
    jmp L29

    ; Quad 96: ETIQ L29  
L29:

    ; Quad 97: + J 1 J
    mov ax, [J]
    mov cx, ax    ; Save first operand
    mov ax, 1
    add ax, cx    ; Add operands
    mov [J], ax

    ; Quad 98: SAUT   L28
    jmp 

    ; Quad 99: ETIQ L30  
L30:

    ; Quad 100: + I 1 I
    mov ax, [I]
    mov cx, ax    ; Save first operand
    mov ax, 1
    add ax, cx    ; Add operands
    mov [I], ax

    ; Quad 101: SAUT   L25
    jmp 

    ; Quad 102: ETIQ L27  
L27:

    ; Quad 103: := 2  I
    mov ax, 2
    mov [I], ax

    ; Quad 104: := 3  J
    mov ax, 3
    mov [J], ax

    ; Quad 105: - 2 1 T45
    mov ax, 2
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T45], ax

    ; Quad 106: - 3 1 T47
    mov ax, 3
    mov cx, ax    ; Save first operand
    mov ax, 1
    mov dx, ax    ; Save second operand
    mov ax, cx    ; Restore first operand
    sub ax, dx    ; Subtract second operand
    mov [T47], ax

    ; Quad 107: + INT_ARRAY[T45] INT_ARRAY[T47] T49
    ; Array access INT_ARRAY[T45]
    mov bx, [T45]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, INT_ARRAY    ; Add array base address
    mov ax, [bx]  ; Load value from array
    mov cx, ax    ; Save first operand
    ; Array access INT_ARRAY[T47]
    mov bx, [T47]
    shl bx, 1     ; Multiply by 2 for word size
    add bx, INT_ARRAY    ; Add array base address
    mov ax, [bx]  ; Load value from array
    add ax, cx    ; Add operands
    mov [T49], ax

    ; Quad 108: BLE L33 2 J
    mov ax, [2]
    cmp ax, [J]
    jle L33

    ; Quad 109: SAUT L31  
    jmp L31

    ; Quad 110: ETIQ L31  
L31:

    ; Quad 111: SAUT L32  
    jmp L32

    ; Quad 112: ETIQ L33  
L33:

    ; Quad 113: ETIQ L32  
L32:

    ; Quad 114: BGE L35 2 J
    mov ax, [2]
    cmp ax, [J]
    jge L35

    ; Quad 115: SAUT L34  
    jmp L34

    ; Quad 116: ETIQ L34  
L34:

    ; Quad 117: ETIQ L35  
L35:

    ; Quad 118: BL L37 2 J
    mov ax, [2]
    cmp ax, [J]
    jl L37

    ; Quad 119: SAUT L36  
    jmp L36

    ; Quad 120: ETIQ L36  
L36:

    ; Quad 121: ETIQ L37  
L37:

    ; Quad 122: BG L39 2 J
    mov ax, [2]
    cmp ax, [J]
    jg L39

    ; Quad 123: SAUT L38  
    jmp L38

    ; Quad 124: ETIQ L38  
L38:

    ; Quad 125: ETIQ L39  
L39:

    ; Quad 126: BNE L41 2 J
    mov ax, [2]
    cmp ax, [J]
    jne L41

    ; Quad 127: SAUT L40  
    jmp L40

    ; Quad 128: ETIQ L40  
L40:

    ; Quad 129: ETIQ L41  
L41:

    ; Quad 130: BE L43 2 J
    mov ax, [2]
    cmp ax, [J]
    je L43

    ; Quad 131: SAUT L42  
    jmp L42

    ; Quad 132: ETIQ L42  
L42:

    ; Quad 133: ETIQ L43  
L43:

    ; Quad 134: AFFICHER Value of N is $ N 
    ; Output operation
    mov dx, msg8  ; String message
    mov ax, [N]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 135: AFFICHER Value of X is % 5.500000 
    ; Output operation
    mov dx, msg9  ; String message
    mov ax, 5.500000
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 136: AFFICHER Value of C1 is & 'X' 
    ; Output operation
    mov dx, msg10  ; String message
    mov ax, ['X']
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 137: AFFICHER Message is # "X <= 5" 
    ; Output operation
    mov dx, msg11  ; String message
    mov ax, ["X <= 5"]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 138: AFFICHER Sum of 1 to N is $ T49 
    ; Output operation
    mov dx, msg12  ; String message
    mov ax, [T49]
    mov bx, ax  ; Value to output
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Call hook

    ; Quad 139: := ONE  I
    mov ax, [ONE]
    mov [I], ax

    ; Quad 140: + ONE ONE T55
    mov ax, [ONE]
    mov cx, ax    ; Save first operand
    mov ax, [ONE]
    add ax, cx    ; Add operands
    mov [T55], ax

    ; Quad 141: := T55  I
    mov ax, [T55]
    mov [I], ax

    ; Quad 142: + T55 ONE T56
    mov ax, [T55]
    mov cx, ax    ; Save first operand
    mov ax, [ONE]
    add ax, cx    ; Add operands
    mov [T56], ax

    ; Quad 143: := T56  I
    mov ax, [T56]
    mov [I], ax

    ; Quad 144: + T56 ONE T57
    mov ax, [T56]
    mov cx, ax    ; Save first operand
    mov ax, [ONE]
    add ax, cx    ; Add operands
    mov [T57], ax

    ; Quad 145: := T57  I
    mov ax, [T57]
    mov [I], ax

; I/O Hooks for Python emulator
read_int:
    ; Input hook - Python will intercept
    mov ax, 0FFFFh  ; Input hook identifier
    int 80h         ; Custom interrupt
    ret

print_int:
    ; Output hook - Python will intercept
    mov ax, 0FFFEh  ; Output hook identifier
    int 80h         ; Custom interrupt
    ret


    ; Program termination
    mov ax, 4C00h
    int 21h
